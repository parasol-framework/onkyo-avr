glHelp = [[
Onkyo AV Remote - Command Line Interface

Usage: parasol.exe onkyo.fluid [parameter=value ...]

  help=true         - Show this help message and exit
  discover=true     - Discover Onkyo receivers via UDP broadcast
  ping=true         - Test TCP connectivity with power status query
  power=on|off      - Send power control command (on or off)
  info=true|verbose - Show device information and available commands
  command=VALUE     - Send custom command(s) (raw ISCP or friendly name, comma-separated)
  host=IP           - Target IP address (default: 192.168.178.40)
  port=NUMBER       - Target port (default: 60128)
  timeout=SECONDS   - Connection timeout in seconds (default: 5)
  response-output=FILE - Log all responses to file in hex format

For verbose logging add --log-api

Note that the numeric values associated with commands are hexadecimal.

Command Examples:
  parasol onkyo.fluid command=PWR01        - Raw ISCP power on
  parasol onkyo.fluid command=MVL50        - Raw ISCP set volume to 50
  parasol onkyo.fluid command=PWR01,MVL50  - Multiple commands (comma-separated)
  parasol onkyo.fluid command=power=on     - Friendly command format
  parasol onkyo.fluid discover=true --log-api
  parasol onkyo.fluid host=192.168.178.50 ping=true
  parasol onkyo.fluid power=on timeout=10
  parasol onkyo.fluid info=true verbose=true
]]

    local glSelf = obj.find('self')
    local glPath = glSelf.workingPath
    local eiscp = require('./lib/eiscp')
    local discovery = require('./lib/discovery')
    local display = require('./lib/command_display')

    local glConfig = {
       host = nil,
       port = 60128,
       timeout = 5.0,
       responseOutputFile = nil
    }

    -- Store connection instance
    local glConnection = nil

----------------------------------------------------------------------------------------------------------------------
-- Process command line arguments using key=value format (following http_server.fluid pattern)

    if arg('help') then
       print(glHelp)
       return
    end

    if arg('host') then
       glConfig.host = arg('host')
    end

    if arg('port') then
       glConfig.port = tonumber(arg('port')) or glConfig.port
    end

    if arg('timeout') then
       glConfig.timeout = tonumber(arg('timeout')) or glConfig.timeout
    end

    if arg('response-output') then
       glConfig.responseOutputFile = arg('response-output')
    end

----------------------------------------------------------------------------------------------------------------------
-- Command implementations

local function doDiscovery()
   -- Performs UDP discovery on port 60128 (broadcast or direct IP)

   if glConfig.host then
      print('Discovering Onkyo receivers at ' .. glConfig.host .. '...')
   else
      print('Discovering Onkyo receivers on the network...')
   end

   print('(This may take up to ' .. glConfig.timeout .. ' seconds)')
   print('')

   local receivers = discovery.findReceivers(glConfig.timeout, glConfig.host, tonumber(arg('limit')))
   if not receivers then return end

   if #receivers == 0 then
      print('No Onkyo receivers found on the network')
      return
   end

   print('Found ' .. #receivers .. ' Onkyo receiver(s):')
   print('')

   for i, receiver in ipairs(receivers) do
      print('  ' .. i .. '. ' .. receiver.model)
      print('     IP: ' .. (receiver.ip or 'Unknown'))
      print('     Port: ' .. (receiver.port or 'Unknown'))
      print('     Area: ' .. (receiver.area or 'Unknown'))
      print('     MAC: ' .. (receiver.mac or 'Unknown'))
      if receiver.raw then
         print('     Raw: ' .. receiver.raw)
      end
      print('')
   end

   collectgarbage()
end

----------------------------------------------------------------------------------------------------------------------
-- Establishes TCP connection to receiver on configured host:port

local function doConnect()
   if not glConfig.host then
      local receiver = discovery.findReceiver(nil, glConfig.timeout)
      glConfig.host = receiver and receiver.ip or nil
   end

   collectgarbage()

   if not glConfig.host then
      error('Error: No target host specified and no receivers found on the network. Use host=IP or discover first.')
   end

   print('Connecting to ' .. glConfig.host .. ':' .. glConfig.port .. '...')

   glConnection = eiscp.connect(glConfig.host, glConfig.port, glConfig.timeout, glConfig.responseOutputFile)
   return glConnection
end

----------------------------------------------------------------------------------------------------------------------
-- Tests connectivity by sending PWRQSTN command and waiting for response

local function doPing()
   local connection = doConnect()

   connection:ping()  -- Sends PWRQSTN (power status query)
   connection:disconnect()

   print('Ping successful!')
   if connection.lastResponse then
      print('Response: ' .. connection.lastResponse.message())
   end
end

----------------------------------------------------------------------------------------------------------------------

local function doPowerControl(Action)
   -- Sends power control commands: PWR01 (on) or PWR00 (off)
   local action = Action:lower()
   if (action != 'on') and (action != 'off') then
      print('Error: Invalid power action "' .. nz(Action,'NIL') .. '". Use "on" or "off".')
      return
   end

   local connection = doConnect()

   print('Setting power ' .. action .. '...')

   local success = false
   if action == 'on' then
      success = pcall(function() connection:powerOn() end)
   else
      success = pcall(function() connection:powerOff() end)
   end

   connection:disconnect()

   if success then
      print('Power command sent successfully!')
      local response = connection.lastResponse
      if response then
         print('Response: ' .. response.message())
      end
   else
      print('Power command failed')
   end
end

----------------------------------------------------------------------------------------------------------------------

local function doGetInfo()
   -- Requests device information and displays available commands

   -- Get discovery data first (for fallback)
   local discoveryData = nil
   if not glConfig.host then
      local receiver = discovery.findReceiver(nil, glConfig.timeout)
      if receiver then
         discoveryData = receiver
         glConfig.host = receiver.ip
      end
   end

   local connection = doConnect()

   print('Requesting device information...')

   -- Get device information (with discovery fallback)
   connection:getDeviceInfo(discoveryData)  -- Sends NRIQSTN and parses response

   if not connection:isDeviceDetected() then
      print('Warning: Could not detect device model. Showing universal commands.')
      print('')
      if connection.lastResponse then
         print('Response: ' .. connection.lastResponse.message())
         print('')
      end
   end

   -- Display device information
   if connection.deviceInfo then
      local zones = {'main'} -- TODO: detect actual zones from device
      display.showDeviceInfo(connection.deviceInfo, connection.deviceModelsets, zones)
   end

   -- Display available commands
   local verbose = arg('info') == 'verbose'
   local model = connection.deviceModel or 'unknown'

   display.showAvailableCommands(model, 'main', verbose)

   connection:disconnect()
   return true
end

----------------------------------------------------------------------------------------------------------------------
-- Parse and send custom command(s) (raw ISCP or friendly format)

local function doSendCommand(commandStr)
   if not commandStr or commandStr == '' then
      print('Error: No command specified')
      return
   end

   local connection = doConnect()

   -- Split commands by comma and process each one
   local commands = string.split(commandStr, ',')
   
   for i, cmd in ipairs(commands) do
      cmd = cmd:match('^%s*(.-)%s*$')  -- Trim whitespace
      
      if cmd != '' then
         print('Sending command ' .. i .. '/' .. #commands .. ': ' .. cmd)
         
         local ex = catch(function()
            connection:sendCommand(cmd:upper())
         end)
         
         if ex then
            print('Error sending command "' .. cmd .. '": ' .. ex.message)
         else
            if connection.lastResponse then
               print('Response: ' .. connection.lastResponse.message())
            end
         end
         
         -- Small delay between commands if there are multiple
         if i < #commands then
            connection.proc.sleep(0.25)
         end
      end
   end

   connection:disconnect()
end

----------------------------------------------------------------------------------------------------------------------

   print('Onkyo AV Remote')
   print('')

   -- Execute commands based on named arguments (only one command allowed per execution)

   local commandExecuted = false

   if arg('discover') then
      doDiscovery()
      commandExecuted = true
   elseif arg('ping') then
      doPing()
      commandExecuted = true
   elseif arg('power') then
      doPowerControl(arg('power'))
      commandExecuted = true
   elseif arg('info') then
      doGetInfo()
      commandExecuted = true
   elseif arg('command') then
      doSendCommand(arg('command'))
      commandExecuted = true
   end

   if not commandExecuted then
      print(glHelp)
   end
